package com.cloudflare.url.service;

import com.cloudflare.url.database.data.AccessData;
import com.cloudflare.url.database.data.UrlData;
import com.cloudflare.url.database.repository.AccessRepository;
import com.cloudflare.url.database.repository.UrlRepository;
import com.cloudflare.url.controller.AccessModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class UrlService {

    @Autowired
    UrlRepository urlRepository;

    @Autowired
    AccessRepository accessRepository;

    /*
    The short url is generated by randomly selecting 8 ints from 0-61 and then grabbing those 8 characters
    from the char array of A-Z,a-z,0-9
     */
    SecureRandom secureRandom = new SecureRandom();

    Character[] validChars = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                         'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                         '0','1','2','3','4','5','6','7','8','9'};

    public UrlData saveUrl(UrlData url) {
        /*
        Create a random 8 digit short url and save the entire object to the database
         */
        url.setShorturl(createShortUrl());

        return urlRepository.save(url);
    }

    private String createShortUrl() {
        StringBuilder stringBuilder = new StringBuilder();
        for(int i = 0; i < 8; i++) {
            stringBuilder.append(validChars[secureRandom.nextInt(62)]);
        }

        String shortUrl = stringBuilder.toString();

        /*
        check to see if this short url is already being used
        if it is already used then call the same function again to get a different short url
         */
        if(urlRepository.findByShorturl(shortUrl) == null) {
            return shortUrl;
        } else {
            return createShortUrl();
        }

    }

    public String getFullUrl(String shortUrl) {
        /*
        call the addAccess method to denote someone is using this short url
        look up the full url based on the inputted short url and return the full url
         */
        addAccess(shortUrl);
        return urlRepository.findByShorturl(shortUrl).getLongurl();
    }

    @Async
    public void addAccess(String shortUrl) {
        /*
        asyncronous method to add a row into the access table to track how often each short url is requested
        save with the current LocalDateTime
         */
        AccessData accessData = new AccessData();
        accessData.setShorturl(shortUrl);
        accessData.setAccesstimestamp(LocalDateTime.now());

        accessRepository.save(accessData);
    }

    public AccessModel getAccess(String shortUrl, String timePeriod) {
        /*
        based on the inputted time period, there is a different query that is made
         */
        LocalDateTime time = LocalDateTime.now();
        List<AccessData> accessData;
        if(timePeriod.equalsIgnoreCase("day")) {
            time = time.minusDays(1);
            accessData = accessRepository.findAllByShorturlAndAccesstimestampAfter(shortUrl, time);
        } else if(timePeriod.equalsIgnoreCase("week")) {
            time = time.minusWeeks(1);
            accessData = accessRepository.findAllByShorturlAndAccesstimestampAfter(shortUrl, time);
        } else {
            accessData = accessRepository.findAllByShorturl(shortUrl);
        }

        return mapToModel(accessData, shortUrl, timePeriod);
    }

    private AccessModel mapToModel(List<AccessData> accessData, String shortUrl, String timePeriod) {
        AccessModel model = new AccessModel();
        model.setUrl("http://localhost:8080/url/" + shortUrl);
        model.setTimePeriod(timePeriod);
        List<LocalDateTime> timestamps = accessData.stream().map(d -> d.getAccesstimestamp()).collect(Collectors.toList());
        model.setTimestamps(timestamps);
        model.setTimesAccessed(timestamps.size());

        return model;
    }
}
